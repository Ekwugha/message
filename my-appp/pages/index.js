import { Contract, providers, utils } from "ethers";
import Head from "next/head";
import React, { useEffect, useRef, useState } from "react";
import Web3Modal from "web3modal";
import { abi, MESSAGE_CONTRACT_ADDRESS } from "../constants";
import styles from "../styles/Home.module.css";
import { Col, Card, Row, Container, Button, Spinner } from 'react-bootstrap';

export default function Home() {

  const [walletConnected, setWalletConnected] = useState(false);
  const [loading, setLoading] = useState(false);
  const [inputMessage, setInputMessage] = useState("");
  // const [inputAddress, setInputAddress] = useState("");
  const [retrieveMessage, setRetrieveMessage] = useState("");
  const [inputGetAddress, setInputGetAddress] = useState("");

  const web3ModalRef = useRef();


  const connectWallet = async () => {
    try {
      await getProviderOrSigner();
      setLoading(true);
      setLoading(false);
      setWalletConnected(true);
    } catch (error) {
      console.error(error);
    }
  }

  const getProviderOrSigner = async (needSigner = false) => {
    
    const provider = await web3ModalRef.current.connect();
    const web3Provider = new providers.Web3Provider(provider);

    
    const { chainId } = await web3Provider.getNetwork();
    if (chainId !== 80001) {
      window.alert("Change the network to Mumbai");
      throw new Error("Change network to Mumbai");
    }

    if (needSigner) {
      const signer = web3Provider.getSigner();
      return signer;
    }
    return web3Provider;
  };


  useEffect(() => {
    
    if (!walletConnected) {
      
      web3ModalRef.current = new Web3Modal({
        network: "mumbai",
        providerOptions: {},
        disableInjectedProvider: false,
      });

      connectWallet();
      setRetrieveMessage("")
    }
  }, [walletConnected]);



  const setMessage = async () => {
    try {
      const signer = await getProviderOrSigner(true);

      const messageContract = new Contract(MESSAGE_CONTRACT_ADDRESS, abi, signer);

      setLoading(true);

      const mess = await messageContract.setMessage(inputMessage);

      await mess.wait();
      setLoading(false);

    } catch (error) {
      console.error(error);
    }
  }

  const getMessage = async () => {
    try {
      const provider = await getProviderOrSigner(true);

      const messageContract = new Contract(MESSAGE_CONTRACT_ADDRESS, abi, provider);

      setLoading(true);

      const getmess = await messageContract.getMessage(inputGetAddress);

      setLoading(false);

      console.log(getmess)
      setRetrieveMessage(getmess)
    } catch (error) {
      console.error(error)
    }
  }

  const renderButton = () => {
    // If wallet is not connected, return a button which allows them to connect their wallet
    if (!walletConnected) {
      return (
        <Button onClick={connectWallet} className={styles.button}>
          Connect your wallet
        </Button>
      );
    }

    // If we are currently waiting for something, return a loading button
    if (loading) {
      return <Button variant="primary" disabled>
              <Spinner
              as="span"
              variant="warning"
              size="sm"
              role="status"
              aria-hidden="true"
              animation="grow"/>
                Loading...
            </Button>;
    } 
  };



  return (
    <div>
    {/* <div className="col d-flex justify-content-center my-auto"> */}
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

     <section className="py-5 g">
       <Container>
        <Card className="p-5 bg-light">
           <Row>
               <Col>
                   <div className="box-shadow-full">
                       <Row>
                           <h3 className="text-dark"> Leave a message. </h3>
                           <form name="contact" className="py-3 border-0"  id="my-form" >
                               <div className="form-group py-2">
                                  <textarea type="message"  name="message" id="message" cols="40" rows="5" className="form-control" placeholder="Your Message" required onChange={(e) => setInputMessage(e.target.value || "")}>
                                  </textarea>
                                 </div>
                               
                                 <Button onClick={setMessage}> Send Message </Button>
                               <br/>
                               <br/>
                               <Row>
                               <Col md={6} className="form-group py-2">
                                <input type="tel" name="message" className="form-control" placeholder="Wallet address" required onChange={(e) => setInputGetAddress(e.target.value || "")} />                               
                               </Col>
                               <Col md={6} className="form-group py-2">
                               <Button onClick={getMessage}> Get Message sent by a wallet address </Button>
                               </Col>
                               <div >
                                <h5 className="text-dark"> Message </h5>
                                <p className="text-dark"> {retrieveMessage} </p>
                             </div>
                             {renderButton()}
                           </Row>
                           </form>
                       </Row>
                   </div>
               </Col>
           </Row>
           </Card>
       </Container>
     </section>
   </div>
  )
}
